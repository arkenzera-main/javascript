1 - Boas práticas na programação:
    1) Documentação:
        /** 
        * Descrição do código 
        * @author define o autor do código
        * @link define um link (site, repositório do github) 
        */
    2) Mandamentos do Código Limpo:
        Não abusarás do uso dos comentários no código 
    3) Nomeação:
        - Não usaras caracteres especiais, espaço e acentos
        - Apenas iniciar com caixa alta classes modelo, todo o resto ( variáveis, funções devem ter apenas letras minúscula)
        - Usar nomes que contextualizem a situação-problema 
    4) Alinhamento ( identação do código )

    5) Quanto menor o código melhor!

_____________________________________________________________________
Comandos de terminal básicos:

    node -v exibe a versão do node ( javascript )
    cd /caminho entra em algum caminho ( = comandos básicos de qualquer terminal bruh)
    cd .. volta um nível acima
    cls,clear limpa o a tela terminal
    node /arquivo.js executa um arquivo javascript
    dir lista os arquivos do caminho atual 
    key:up repete o ultimo comando usado 
    pwd lista o caminho atual
_____________________________________________________________________
Dicas no VSCode:
    Combinação de teclas <alt><shift><f> alinha o código ( beautify )
    VS Code Produtividade Infinita: (repositório)
        https://github.com/arkenzera-main/VS-Code-Produtividade-Infinita/tree/master












_____________________________________________________________________
Javascript:
    Funciona com sentenças e não linhas de código
    ; é opcional 
    console.clear() limpa a tela do console 
    console.log() escreve no console 
    // Comentários de linha
    ' e " não se dão bem juntas! não misture-as!!!
    Dica:   Em strings use " 
            Em bibliotecas e caminhos use '

    Observações:
        Regra de precedência matemática
         % não calcula a porcentagem! calcula o resto da divisão 
             Exemplo:
             12/5 = 2 e sobra 2, ou seja 12%5 = 2
    Operadores lógicos:
    Dica: https://professorjosedeassis.github.io/simulador/

_____________________________________________________________________
Estudo das variáveis:
    - String (texto)
    - Numéricas (números)
    - Booleana (verdadeiro ou falso)
    Tipagem dinâmica:
        No Javascript o tipo string é definido quando o conteúdo da variável entre aspas "Hello World!"
        Variáveis numéricas podem ser números inteiros e não inteiros 
            Obs: Vírgula é um caractere e não um número! Se necessário converter o input de "," para "." usando .replace(",",".") 
            Na entrada de dados numéricos via terminal ou formulário torna-se necessário a conversão para números
                Quem faz isso no Javascript é a classe Number
Observação:
    No Javascript as variáveis são dinamicamente tipadas (os valores são automaticamente assumidos)
    const (define uma constante)
    var (define uma variável) (está em desuso e não deve ser usado!!!)
    let (define uma variável)
_____________________________________________________________________
Git e GitHub
Material de apoio: https://www.youtube.com/watch?v=FF1f4bKYhoo&list=PLbEOwbQR9lqzK14I7OOeREEIE4k6rjgIj

Configurando o git:
Instalar o git, depois:
    Observação: Digitar os comandos apenas na raiz do repositório
    Abrir o bash:
        git config --global user.name "nome de usuario"
        git config --global user.email "email"
        git clone link_do_repositório (clona o determinado repositório localmente(faz o download))
        git status (verifica o status do repositório em relação ao GitHub)
        git add . (trackeia todas as alterações no caminho atual)
        git commit -m "fundamentos" (commita algo)
_____________________________________________________________________
Node - Plataforma para uso do Javascript fora do browser 
    Usa o motor V8 do Google Chromium
        Usa bibliotecas C / C++ 
    Pacotes gerenciados pelo NPM (Node Packager Manager)
        npm ls lista pacotes
        npm install instala um pacote 
        npm remove remove algum pacote
    Pacote = Módulo = Biblioteca
        Para usar um pacote é necessário fazer a importação do mesmo no inicio do código ( Logo no cabeçalho )
_____________________________________________________________________
Algoritmo: Recipe
    Exemplo 1 - Calcular a média entre dois números
        Média = (a+b)/2
        Precisa-se de três variáveis para realizar o cálculo:
            nota1, nota2 e média
        Por conseguinte, temos que precisa-se de duas entras: Nota 1 e nota 2
        Lembrando sempre de regras de precedência matemática ( PEMDAS )
        Por fim, temos que o output é a média entre os dois números inputados pelo usuário 
    Algoritmo:
        Exemplo 2 - Desenvolver um app modo console para cálculo de porcentagem:
            10% de 200 = 20
            x       y  = valor
            y ---------- 100%
            valor ------ x
            valor * 100 = y * x
            valor = (y*x)/100
            //variaveis = x,y,valor
            //input = x,y
            //operação = (y*x)/100
            //output = valor
    Exercício1:
        Desenvolver um app modo console para calcular o valor do desconto:
            Exemplo:
                Valor total = 200
                Desconto = 5%
                Total com desconto = 200 - 5% do valor total = 190 
    Exercício2:
        Desenvolver um app modo console para conversão de moeda (Real para Euro)
_____________________________________________________________________
Estruturas de Controle
if, if-else ( encadeamento/aninhamento else-if) switch-case

if (condição) { 
    //condição verdadeira
} else {
    //condição falsa
}
Observações:
    1) Uma resposta sempre será exibida, independendo da condição
    2) Não existe condição verdadeira e falsa ao mesmo tempo ( condição de schordinger )

Exemplo de uso da estrututa else if 
    No exemplo cálculo da média, estabelecer as seguintes condições:
        1) Se a média estiver < 2 = Reprovado
        2) Se a média estiver entre (2 e 5( = Recuperação
        3) Se a média estiver > 5 = Aprovado
    Resumindo:
        If(condição 1 ){
            condição 1 verdadeira
        } else if (condição 2){
            condição 2 verdadeira
        } else if (condição 3){
            condição 3 verdadeira
        } else {
            nenhuma das condições anteriores verdadeiras
        }
    Obs: Else final não é obrigatório 
    
Exercício3:
    No Brasil, existem três condições sobre o cidadão em relação ao direito a voto:
        < 16 = Proibido
        > 16,17 e > 70 = Facultativo
        > 18 e < 70 = Obrigatório
    Desenvolver um aplicativo em JS no console para verificar o direito a voto de um cidadão
_____________________________________________________________________
Estrutura de controle condicional switch-case
    Sintaxe:
        variavel (número inteiro ou letra)
        switch(variavel){
            case:1
                código se o valor da variável for igual a 1
                break
            case:2
                código se o valor da variável for igual a 2
                break
            case:N
                código se o valor da variável for igual a N
                break
            default:
                código caso o valor da variável for diferente de 1, 2 ou N
                break
        }
_____________________________________________________________________
Exercício4:
    Desenvolver um app em JS no console que faça o sorteio de um jogo de dado
    e associar ao resultado a imagem da face de um dado correspondente
_____________________________________________________________________
Estruturas de controle - Laços de repetição 
for
while
do-while

for:
    Estrutura de repetições finitas (determinada)
    for (let i=1; condição; incremento/decremento){
        início; repetir enquanto condição verdadeira; i++ ou i--
    }
    Obs: A variável declarada dentro da estrutura deve ser um número inteiro 

while e do-while:
    Estrutura de repetições infinitas (indeterminada)
    while:
        while (condição){
             analisa a condição e executa o código enquanto a condição for verdadeira
        }
    do-while:
        do-while (condição){
            sempre executa o código uma vez, independendo da condição - depois se comporta como while
        }

Exercício6:
    Desenvolver um aplicativo para calcular a tabuada, semelhante ao exemplo da aula usando a estrutura
    while no lugar do for
_____________________________________________________________________
Função:
    Uma função ( ou método ) consiste em automatizar uma tarefa para que não exista a necessidade de 
    escrever um mesmo código com o mesmo fim mais de uma vez.
    Funções em javascript:
        Existem funções:
            - Literais (nome)
            - Atribuidas (variável) - também chamada de função anônima
                São funções atribuidas a uma constante ou variável onde o resultado
                do processamento da função é armazenado e pode ser utilizado, além disso
                funções atribuidas podem ser simplificadas (arrow function)
    É sempre o ideal dar nome para as funções tendo em vista a situação problema determinada. Comumente
    usam-se verbos para nomear as funções

Atividade 3 (Avaliação em dupla)
    Desenvolver uma calculadora no console usando funções, conforme 
    modelo a seguir:
        Calculadora:
            Digite o primeiro número: 10
            Digite o segundo número: 2
            Opções:
                1- Somar
                2- Subtrair
                3- Multiplicar
                4- Dividir 
                5- Calcular a porcentagem 
            Digite a opção desejada: 3
            A multiplicação de 10 x 2 = 20
_____________________________________________________________________
POO:
    - Abstração (classe modelo)
    - Herança
    - Polimorfismo

    - Encapsulamento (segurança)

    Obs: Para criar uma classe modelo usamos uma letra maiúscula no início

    Obs: No Javascript a classe modelo é uma função

    Obs: Sempre que existir a palavra new um objeto é criado (instanciado)

    Obs: O ponto é usado para acessar os recursos (atributos e métodos) da classe modelo

    Obs: Polimorfismo - para reescrever um método é necessário usar o mesmo nome do método original  

_____________________________________________________________________
Atividade 4: Avaliação individual --- Ter como base https://professorjosedeassis.github.io/javaSE/#/62
Slides 62 até o slide 67 POO Exercício 1 - carros - menos o 65


